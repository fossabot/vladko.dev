<?php

namespace App\Admin\Extensions\Media;

use Illuminate\Http\UploadedFile;
use Spatie\MediaLibrary\MediaCollections\Models\Media;

class MediaLibraryMultipleFile extends MediaLibraryBase
{
    private $minWidth;
    private $minHeight;

    public function fill($data)
    {
        parent::fill($data);

        $value = $this->form->model()->getMedia($this->column());

        foreach ($value as $key => $media) {
            $this->value[] = [

                'name' => $media->file_name, // file name
                'size' => $media->size, // file size in bytes
                'type' => $media->mime_type, // file MIME type
                'file' => $media->getUrl(), // file path
                'local' => $media->getPath(),
                'index' => $media->order_column,
                'data' => [
                    'media_id' => $media->id,
                    'url' => $media->getFullUrl(),
                    'thumbnail' => $media->getFullUrl('thumb'),
                    'title' => $media->getCustomProperty('caption') ?? $media->file_name,
                    'listProps' => [
                        'key' => $media->order_column,
                    ],
//                    "readerCrossOrigin" => "anonymous", // fix image cross-origin issue (optional)
//                    "readerForce" => true, // prevent the browser cache of the image (optional)
//                    "readerSkip" => false, // skip file from reading by rendering a thumbnail (optional)
                ],
            ];
        }
    }

    public function render()
    {
        $this->addVariables([
            'minWidth' => $this->minWidth ?? false,
            'minHeight' => $this->minHeight ?? false,
        ]);

        return parent::render(); // TODO: Change the autogenerated stub
    }

    public function setOriginal($data)
    {
        $value = $this->form->model()->getMedia($this->column());

        foreach ($value as $key => $media) {
            $this->original[$key] = $media->id;
        }
    }

    public function __construct(string $column, array $arguments = [])
    {
        parent::__construct($column, $arguments);

        $this->id = 'file_' . uniqid();
    }

    protected function prepareForeach(UploadedFile $file = null)
    {
        $this->name = $this->getStoreName($file);

        return $this->uploadMedia($file);
    }

    public function minWidth($width)
    {
        $this->minWidth = $width;

        return $this;
    }

    public function minHeight($height)
    {
        $this->minHeight = $height;

        return $this;
    }

    public function prepare($files)
    {
        $targets = array_map([$this, 'prepareForeach'], $files);

        return array_merge($this->original(), $targets);
    }

    protected function initialPreviewConfig()
    {
        $medias = Media::whereIn('id', $this->value ?: [])->get();

        $config = [];
        foreach ($medias as $media) {
            $config[] = $this->getPreviewEntry($media);
        }

        return $config;
    }
}
